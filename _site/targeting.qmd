---
title: "Spending per Targeting Criteria"
format:
  html:
    toc: true
    toc-location: right
---

```{r setup, include=FALSE}

all_dat <- readRDS("../data/all_dat.rds")

sets <- jsonlite::fromJSON("../settings.json")


## Global options
knitr::opts_chunk$set(
    cache = F,
    echo = F,
    warning = F,
    message = F,
    cache.lazy = FALSE
)


# pacman::p_load(tidyverse, highcharter)
library(tidyverse)
library(highcharter)
library(gt)

pacman::p_load(knitr, tidyverse, rmarkdown, openxlsx, sf)


options(scipen = 999)


```


```{r}

# wtm_data %>% count(party,sort = T)


# source("../party_utils.R")
color_dat <- tibble(
  colors = c("#00b13d", "#80c31c", "#0a2cca", "#008067", "#bf0000", "#ff0000", "#6f2421", "#02a6e9", "#92107d", "#04d3d4", "#242b57", "#66cdaa", "#242b57", "#006b28", "#012758", "#ea5b0b", "#582c83", "#698c0c", "#fdfd00", "#8da6d6", "#dc1f26"),
  party = c("D66", "GroenLinks", "VVD", "CDA", "SP", "PvdA", "FvD", "ChristenUnie", "50PLUS", "Alliantie", "BVNL", "DENK", "Ja21", "PvdD", "PVV", "SGP", "Volt Nederland", "BBB", "BIJ1", "NSC", "GroenLinks-PvdA"))


most_left_party <- "VVD"


scale_fill_parties <- function(...){
    ggplot2:::manual_scale(
        'fill',
        values = setNames(color_dat$colors, color_dat$party),
        ...
    )
}
scale_color_parties <- function(...){
    ggplot2:::manual_scale(
        'color',
        values = setNames(color_dat$colors, color_dat$party),
        ...
    )
}
source("../utils.R")
# source("../party_utils.R")
```



```{r}
election_dat30 <- readRDS("../data/election_dat30.rds") %>%
      # left_join(all_dat) %>%
    rename(internal_id = page_id) %>%
  filter(party != "And")  %>%
  filter(is.na(no_data)) %>%
  mutate(party = ifelse(party %in% c("GroenLinks", "PvdA"), "GroenLinks-PvdA", party))


election_dat7 <- readRDS("../data/election_dat7.rds") %>%
      # left_join(all_dat) %>%
    rename(internal_id = page_id) %>%
  filter(party != "And")  %>%
  filter(is.na(no_data)) %>%
  mutate(party = ifelse(party %in% c("GroenLinks", "PvdA"), "GroenLinks-PvdA", party))

# saveRDS(election_dat30, "../data/election_dat30.rds")
# saveRDS(election_dat7, "../data/election_dat7.rds")

fin <- (as.Date(election_dat30$ds[1])-lubridate::days(1))
begin7 <- fin-lubridate::days(6)
begin30 <- fin-lubridate::days(29)


last7days_string <- paste0(create_date(begin7), " - ", paste(create_date(fin), lubridate::year(fin)))
last30days_string <- paste0(create_date(begin30), " - ", paste(create_date(fin), lubridate::year(fin)))



the_currency <- election_dat30 %>%
  count(main_currency, sort = T) %>%
  slice(1) %>%
  pull(main_currency)

if(the_currency == "EUR"){
  currency_symbol <- "â‚¬"
} else {
  currency_symbol <- "CURRENCY"
}


```

This section shows spending per *targeting criteria* used by political parties to reach citizens in the run-up to the `r sets$election_title` for the latest available data. It only includes targeting on Meta platforms (Facebook and Instagram), which offers the most detailed targeting options to political advertisers.




<!-- ## Spending per Targeting Criteria -->

How much did campaigns spend on different targeting methods? The graphs below show spending *overall* across all parties and *by party*.

> Note: targeting criteria can overlap so the percentages do not sum up to 100%.

::: {.panel-tabset}


### `r last30days_string` (Last 30 days)

::: {.panel-tabset}



#### Overall


```{r, fig.width=8, fig.height=5, dpi=300}
coltototal30 <- election_dat30 %>%
    mutate(total_spend = total_spend_formatted) %>%
    filter(main_currency == the_currency) %>%
        calc_targeting()

gg <- coltototal30 %>%
  filter(perc >= 0.01) %>%
  add_count(target) %>%
  # filter(n == 3) %>%
  mutate(target = case_when(
    target == "custom_audience" ~ "Custom Audiences",
    target == "countries" ~ "GEOGRAPHY: Entire Country",
    target == "regions" ~ "GEOGRAPHY: Regions",
    target == "lookalike_audience" ~ "Lookalike Audiences",
    target == "interest" ~ "Detailed",
    target == "age" ~ "Age",
    target == "zips" ~ "GEOGRAPHY: Postal Code",
    target == "CITY" ~ "GEOGRAPHY: City",
    target == "language" ~ "Language",
    target == "gender" ~ "Gender",
    target == "COMUNE" ~ "GEOGRAPHY: Municipality",
    target == "electoral_districts" ~ "GEOGRAPHY: Electoral Districts",
    target == "COUNTY" ~ "GEOGRAPHY: Counties",
    str_detect(target, "NEIGHBOR") ~ "GEOGRAPHY: Neighborhood",
    T ~ target
  )) %>%
    filter(target != "Unknown") %>%
    arrange(desc(perc))


library(highcharter)

the_order <- gg %>%
  tidyr::complete(target, fill = list(perc = 0)) %>%
  dplyr::mutate(target = forcats::fct_reorder(target, perc, .desc = FALSE)) %>%
  dplyr::pull(target) %>%
  levels()

gg %>%
  mutate(spend_perlab = scales::comma(round(spend_per))) %>%
  dplyr::mutate(target = forcats::fct_relevel(target, the_order)) %>%
  highcharter::hchart(type = "bar", hcaes(x = target, y = perc)) %>%
  highcharter::hc_plotOptions(bar = list(color = "darkgrey")) %>%
  highcharter::hc_xAxis(labels = list(style = list(fontSize = "10px"))) %>%
  highcharter::hc_yAxis(title = list(text = "Budget spent on targeting method (% of Total spend)")) %>%
  highcharter::hc_add_theme(hc_theme_google()) %>%
 highcharter::hc_tooltip(
    pointFormat = paste0("<b>{point.target}</b><br>% of Total Budget Spent: {point.y:.1f}%<br>Spend a total of ", currency_symbol, "{point.spend_perlab} on this method."),
    headerFormat = ""
  ) %>%
  highcharter::hc_credits(
    enabled = TRUE,
    text = "Source: Meta Ad Library. Data Viz: Fabio Votta (@favstats)."
  )%>%
    hc_exporting(
      enabled = TRUE
    )






```


#### By Party

```{r}
col_each30 <- election_dat30 %>%
    mutate(total_spend = total_spend_formatted) %>%
    filter(main_currency == the_currency) %>%
    group_split(party) %>%
    map_dfr(~{
        calc_targeting(.x) %>%
            mutate(#coalition = .x$coalition[1],
                   party = .x$party[1])
    })



library(highcharter)
library(dplyr)

plot_geography <- function(x) {
  # x <- col_each30
  gg <- x %>%
    filter(perc >= 0.5) %>%
    add_count(party, target) %>%
    mutate(target = case_when(
      target == "custom_audience" ~ "Custom Audiences",
      target == "countries" ~ "GEOGRAPHY: Entire Country",
      target == "regions" ~ "GEOGRAPHY: Regions",
      target == "lookalike_audience" ~ "Lookalike Audiences",
      target == "interest" ~ "Detailed",
      target == "age" ~ "Age",
      target == "zips" ~ "GEOGRAPHY: Postal Code",
      target == "CITY" ~ "GEOGRAPHY: City",
      target == "language" ~ "Language",
      target == "gender" ~ "Gender",
      target == "COMUNE" ~ "GEOGRAPHY: Municipality",
      target == "electoral_districts" ~ "GEOGRAPHY: Electoral Districts",
      target == "COUNTY" ~ "GEOGRAPHY: Counties",
      str_detect(target, "NEIGHBOR") ~ "GEOGRAPHY: Neighborhood",
      TRUE ~ target
    )) %>%
    filter(target != "Unknown") %>%
    arrange(desc(n))

  the_order <- gg %>%
    complete(party, target, fill = list(n = 0)) %>%
    mutate(target = fct_reorder(target, n, .desc = FALSE)) %>%
    pull(target) %>%
    levels()



  charts <- gg %>%
  mutate(spend_perlab = scales::comma(round(spend_per))) %>%
    split(.$party) %>%
    map(~ {
             the_color <- color_dat$colors[color_dat$party == .x$party[1]]
      hchart(.x, type = "bar", hcaes(x = target, y = perc), color = the_color) %>%
            hc_plotOptions(bar = list(horizontal = TRUE, stacking = "normal")) %>%
            hc_yAxis(title = list(text = "% Party Budget spent on targeting method"), max = 100, min = 0) %>%
            hc_xAxis(title = "", labels = list(style = list(fontSize = "10px"))) %>%
            hc_add_theme(hc_theme_google()) %>%
           highcharter::hc_tooltip(
              pointFormat = paste0("<b>{point.target}</b><br>% of Total Budget Spent: {point.y:.1f}%<br>Spend a total of ", currency_symbol,           "{point.spend_perlab} on this method."),
              headerFormat = ""
            ) %>%
            hc_title(text = unique(.x$party), align = "left", style = list(fontWeight = "bold")) %>%
        hc_size(height = 300) %>%
    hc_exporting(
      enabled = TRUE
    )
    }
    )

  charts
}

```


```{r echo=FALSE, results='asis'}
library(htmltools)
library(purrr)

# Generate plots
plots <- plot_geography(col_each30)

# Map each plot to a column
columns <- map(plots, ~ div(style = "width: 50%; float: left;", .x))

# If there's an odd number of plots, add an empty div to the end to balance the columns
if (length(columns) %% 2 == 1) {
  columns <- c(columns, list(div(style = "width: 50%; float: left;")))
}

# Pair up the columns and wrap them in rows
rows <- map(seq(from = 1, to = length(columns), by = 2), ~ {
  div(class = "row",
    list(
      columns[[.x]],
      columns[[.x + 1]]
    )
  )
})

# Print the rows
tags$div(class = "container", do.call(tags$div, rows))


```


:::

### `r last7days_string` (Last 7 days)


::: {.panel-tabset}


#### Overall


```{r, fig.width=8, fig.height=5, dpi=300}
coltototal7 <- election_dat7 %>%
    mutate(total_spend = total_spend_formatted) %>%
    filter(main_currency == the_currency) %>%
        calc_targeting()

gg <- coltototal7 %>%
  filter(perc >= 0.01) %>%
  add_count(target) %>%
  # filter(n == 3) %>%
  mutate(target = case_when(
    target == "custom_audience" ~ "Custom Audiences",
    target == "countries" ~ "GEOGRAPHY: Entire Country",
    target == "regions" ~ "GEOGRAPHY: Regions",
    target == "lookalike_audience" ~ "Lookalike Audiences",
    target == "interest" ~ "Detailed",
    target == "age" ~ "Age",
    target == "zips" ~ "GEOGRAPHY: Postal Code",
    target == "CITY" ~ "GEOGRAPHY: City",
    target == "language" ~ "Language",
    target == "gender" ~ "Gender",
    target == "COMUNE" ~ "GEOGRAPHY: Municipality",
    target == "electoral_districts" ~ "GEOGRAPHY: Electoral Districts",
    target == "COUNTY" ~ "GEOGRAPHY: Counties",
    str_detect(target, "NEIGHBOR") ~ "GEOGRAPHY: Neighborhood",
    T ~ target
  )) %>%
    filter(target != "Unknown") %>%
    arrange(desc(perc))

the_order <- gg %>%
  tidyr::complete(target, fill = list(perc = 0)) %>%
  dplyr::mutate(target = forcats::fct_reorder(target, perc, .desc = FALSE)) %>%
  dplyr::pull(target) %>%
  levels()

gg %>%
  mutate(spend_perlab = scales::comma(round(spend_per))) %>%
  dplyr::mutate(target = forcats::fct_relevel(target, the_order)) %>%
  highcharter::hchart(type = "bar", hcaes(x = target, y = perc)) %>%
  highcharter::hc_plotOptions(bar = list(color = "darkgrey")) %>%
  highcharter::hc_xAxis(labels = list(style = list(fontSize = "10px"))) %>%
  highcharter::hc_yAxis(title = list(text = "Budget spent on targeting method (% of Total spend)")) %>%
  highcharter::hc_add_theme(hc_theme_google()) %>%
 highcharter::hc_tooltip(
    pointFormat = paste0("<b>{point.target}</b><br>% of Total Budget Spent: {point.y:.1f}%<br>Spend a total of ", currency_symbol, "{point.spend_perlab} on this method."),
    headerFormat = ""
  ) %>%
  highcharter::hc_credits(
    enabled = TRUE,
    text = "Source: Meta Ad Library. Data Viz: Fabio Votta (@favstats)."
  ) %>%
    hc_exporting(
      enabled = TRUE
    )

```


#### By Party

```{r, fig.width=12, fig.height=9, dpi=300}

col_each7 <- election_dat7 %>%
    mutate(total_spend = total_spend_formatted) %>%
    filter(main_currency == the_currency) %>%
    group_split(party) %>%
    map_dfr(~{
        calc_targeting(.x) %>%
            mutate(#coalition = .x$coalition[1],
                   party = .x$party[1])
    })



```

```{r echo=FALSE, results='asis'}

# Generate plots
plots <- plot_geography(col_each7)

# Map each plot to a column
columns <- map(plots, ~ div(style = "width: 50%; float: left;", .x))

# If there's an odd number of plots, add an empty div to the end to balance the columns
if (length(columns) %% 2 == 1) {
  columns <- c(columns, list(div(style = "width: 50%; float: left;")))
}

# Pair up the columns and wrap them in rows
rows <- map(seq(from = 1, to = length(columns), by = 2), ~ {
  div(class = "row",
    list(
      columns[[.x]],
      columns[[.x + 1]]
    )
  )
})

# Print the rows
tags$div(class = "container", do.call(tags$div, rows))


```

:::


:::
